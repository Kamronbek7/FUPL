#FUPL interpretator 1.0.2
import os
nom="FUPL"

import platform as p
p=p.system()
if p=="Windows":
	stor="C:/"
	os.system("color 2")
	os.system('title FUPL')
if p=="Linux":
	stor="/storage/emulated/0/"
if os.path.isdir(stor+"FUPL"):
	pass
else:
	os.mkdir(stor+"FUPL")

# FUPL GUI
imp=" import*\n"
frm="from "

def modul(nom,funk):
	d=open(str(nom)+".py","w")
	d.write(str(funk))
	d.close()
	return 1

def FaylMavjudEmasligiXato(b):
	print("FaylMavjudEmasligiXato:","'"+b+"' nomli fayl mavjud emas. ")

def FaylMavjudligiXato(b):
	print("FaylMavjudligiXato: '"+b+"' nomli  fayl allaqachon mavjud.")

def ModulMavjudEmasligiXato(b):
	print("ModulMavjudligiXato: '"+b+"' nomli modul mavjud emas.")

def NomXato(b):
	print("NomXato:  '"+b+"' nomli o\'zgaruvchi yoki funksiya topilmadi. ")

def QiymatXato(b,a):
	print("QiymatXato: '"+b+"' qiymati "+a+" emas!")

def SintaksisXato(b):
	print("SintaksisXato:\n\t"+b)
 
class KiritishXato:
	p4="KiritishXato: "
	def argment(a,ol,ber):
		print(KiritishXato.p4+str(a)+" funksiyasi "+str(ol)+"ta argument oladi, ammo siz "+str(ber)+"ta kiritgansiz.")
	def qiymat(a,b):
		print(KiritishXato.p4+str(a)+"\' qiymati o\'rniga ' "+str(b)+"'\' ishlatilgan.")
	def argqiy(arg,qiy):
		print(KiritishXato.p4+str(arg)+" argumentiga "+qiy+'qiymatini berib bo\'lmaydi.')
	def pas(a):
		print(KiritishXato.p4,a)

def AttributXato(qiy,atr):
    print("AtributXato: '"+qiy+"' qiymatida '"+atr+"' atributi yo'q.")
    #return ''

def NolgaBo_lishXato(a):
	#print("Xato: 1-satrda")
	print("NolgaBo_lishXato: Sonni nolga bo'lish mumkin emas!\n\t"+a)

def RuxsatXato(a):
	#print (s)
	a=str(a). split ("\'")
	print ("RuxsatXato: Fayllar tizimining bu qismiga kirish uchun tizim ruxsat bermaydi.\n\t",a[1])

def BuKatalogXato(a):
	a=str(a).split("\'")
	print("BuKatalogXato: Ushbu katalog yoki fayl ustida amal bajarib boʻlmaydi;\nKatalogga nisbatan fayl beriladigan buyruqni qoʻllab boʻlmaydi:\n\t",a[1])

def BuKatalogEmasligiXato(a):
	a=str(a).split("\'")
	print("BuKatalogEmasligiXato: Ushbu manzil - fayl manzili, katalogniki emas:\n\t",a[1])

# MODULLAR

# MATEM
love="Fotima"
secret="I love Fotima"
modul("matem","""
from math import*

nol=0
bir=1
ikki=2
uch=3
to_rt=4
besh=5
olti=6
yetti=7
sakkiz=8
to_qqiz=9
o_n=10
yigirma=20
o_ttiz=30
qirq=40
ellik=50
oltmish=60
yetmish=70
sakson=80
to_qson=90
yuz=100
ming=1000
mln=1000000
mlrd=1000000000
trln=1000000000000

def ildiz(a):
	return sqrt(float(a))
def dar(a,b):
	return float(a)**float(b)
def discrim(a,b,c):
     a=str(a);b=str(b);c=str(c)
     a=QiymatXato(a); b=QiymatXato(b); c=QiymatXato(c)
     d=b**2-4*a*c
     if d<0:
     	print("-"),u()
     if d==0:
     	print(-b/2*n),u()
     if d>0:
         d=sqrt(d)
         x1=-b+d/2*a
         x2=-b-d/2*a
         print("x(v1)=%s"%x1,"x(v2)=%s"%x2)
def taqqos(n,z):
	if n==z:
	    return str(n)+"=="+str(z)
	if n<z:
	   return str(n)+"<"+str(z)
	if n>z:
		return str(n)+">"+str(z)

def toq_juft(a):
	if a%2==0:
		return 'juft'
	else:
		return 'toq'
def odd_even(a):
	if toq_juft(a)=='juft':
		return 'even'
	else:
		return 'odd' 
def toq(a):
	if toq_juft(a)=='toq':
		return True
	else:
		return False
def juft(a):
	if toq_juft(a)=='juft':
		return True
	else:
		return False
def odd(a):
	if toq_juft(a)=='toq':
		return True
	else:
		return False
def even(a):
	if toq_juft(a)=='juft':
		return True
	else:
		return False

def katta(*a):
	return max(*a)
def kichik(*a):
	return min(*a)
def radi(a):
	return radians(a)
def grad(a):
	return degrees(a)
def yaxlit(a):
	return round(a)
def modul(a):
	return abs(a)
def ktyax(a):
	return ceil(a)
def kkyax(a):
	return floor(a)
def yaxn(a,b):
	return round(a,b)

""" )

# FIZIKA
Sevgi="Kamronbek+Fotima"
modul("fizika",
"""
import math as m
g=9.81

def fizik_ozg():
	return physics_const()
def tezl_st(a,b):
	return a/b
def vaqt_sv(a,b):
	return a/b
def yOl_vt(a,b):
	return a*b
def kuch_mg(a):
	return a*g
def force_mg(a):
	return a*g

def  birl(son, birl, otkaz):
	try:
		if str(son).isdigit():
			son=int(son)
		else:
			son=float(son)
	except TypeError:
		KiritishXato.qiymat("haqiqiy son",type(son))
	if (birl=="kg" and otkaz=="g"):
		return son*1000
	if (birl=="g" and otkaz=="kg"):
		return son/1000
	if (birl=="km/h" and otkaz=="m/s"):
		return son/3.6
	if (birl=="m/s" and otkaz=="km/h"):
		return son*3.6
	else:
		return "\'"+birl+"\'"+" yoki "+"\'"+otkaz+"\'"+" qiymatlaridan biri noto'g'ri kiritilgan."

del m
""")

# FAYLLAR
modul("kf",
"""import os
def FaylMavjudEmasligiXato(b):
	print("X 1==")
	print("Fl-X: '"+b+"' Fl - ")

def FaylMavjudligiXato(b):
	print("X 1==")
	print("Fl+X: '"+b+"' Fl +")
def qo_sh(a,b):
	a=str(a);b=str(b)
	j=open(a,\"a\")
	j.write(b)
	o=j.close()
	return ''
def appen(a):
	a=str(a)
	qo_sh(a)

def o_chir(a):
	a=str(a)
	import os
	try:
		os.remove(a)
		return ''
	except FileNotFoundError:
		return FaylMavjudEmasligiXato(a)
def remove(a):
	a=str(a)
	o_chir(a)
	return ''

def yozish(a,b):
	a=str(a);b=str(b)
	t=open(a,'w')
	t.write(b)
	g=t.close()
	return ''
def write(a,b):
	a=str(a);b=str(b)
	yozish(a,b)
	return ''

def qytnmfl(a,b):
	a=str(a);b=str(b)
	import os
	if os.path.exists(a):
		if os.path.exists(b):
			FaylMavjudligiXato(b)
		else:
			os.rename(a,b)
			return ''
	else:
		FaylMavjudEmasligiXato(a)
def rename(a,b):
	a=str(a);b=str(b)
	qaytnomfl(a,b)
	return ''

def yrtfl(a):
	a=str(a)
	import os
	if os.path.exists(a):
		FaylMavjudligiXato(a)
	else:
		open(a,\"x\")
		return ''
def mkfl(a):
	a=str(a)
	yrtfl(a)

def o_qish(fl,mode):
	t=str(fl)
	import os
	if os.path.exists(t):
		g=open (t,mode)
		p=g.read()
		return p
	else:
	   FaylMavjudEmasligiXato(t)
def read(fl,mode):
	a=str(fl)
	return o_qish(a,mode)

def aniq(a):
	a=str(a)
	import os
	if os.path.exists(a):
		return True
	else:
		return False
def todtrfl(a):
	return aniq(a)

def klyar(a):
	os.mkdir (str(a))
	return '' """ )

# TURTLE
Kamronbek="Sev"; Fotima="gi"
frm="from "
modul("chizma",
frm+"tkinter"+imp+
frm+"turtle"+imp+"""
title('FUPL Graphical window')

ko_k="blue"
och_kok="light blue"
toq_kok="navy blue"
havo="olive"

qizil="red"
pushti="pink"
toq_pu="fuchsia"
siyoh="purple"

yashil="green"
och_yash="lime"

sariq="yellow"
toq_sar="orange"
jifar="brown"

kulr="grey"
qora="black"
oq="white"

def o_ngchiz(a,b):
	right(a); forward(b)
def chapchiz(a,b):
	right(a); forward(b)
def o_ng(a):
	right(a)
def chiz(a):
	forward(a)
def chap(a):
	left(a)
def tepa():
	up()
def past():
	down()
def fon(a):
	bgcolor(a)
def toza():
	clearscreen()
def tezl(a):
	speed(a)
def ort(a):
	backward(a)
def qakr():
	penup()
def qatr():
	pendown

def rang(a):
	pencolor(a)

def qalin(a):
	pensize(a)

def nom(a):
    title(a)
def tayyor():
    done(); return'' """)

# SALOM
modul("__salom__",
"""
print ("Salom, O\'zbekiston!")
""")

# FTKIN
tkn="tkinter "
modul("ftkin",
frm+"chizma"+imp+
frm+tkn+"""import*

class tugma:
	def __main__(fr=None, yr=None)
	def joy():
		pass
""")

#Tasodif

modul("tasodif",
"""from random import*
def tasson(a,b):
	return randint(a,b)

def tasod():
	return random ()

def royarl(a):
	try:
		return shuffle(a)
	except:
		print('Ro_yxat emas')"""
)

# VAQT, SOAT
modul("vaqt",
"""
from datetime import*

du="Dushanba"
se="Seshanba"
ch="Chorshanba"
pa="Payshanba"
ju="Juma"
sh="Shanba"
ya="Yakshanba"

yan="Yanvar"
fev="Fevral"
mar="Mart"
apr="Aprel"
may="May"
iyn="Iyun"
iyl="Iyul"
avg="Avgust"
sen="Sentabr"
okt="Oktabr"
noy="Noyabr"
dek="Dekabr"

oylar=[yan, fev, mar ,apr, may, iyn, iyl, avg, sen, okt, noy, dek]
kunlar=[du, se, ch, pa, ju, sh, ya]
oy31={
yan:31,
fev:"28/29",
mar:31,
apr:30,
may:31,
iyn:30,
iyl:31,
avg:31,
sen:30,
okt:31,
noy:30,
dek:31
}

def hozir():
	import datetime
	return datetime.datetime.now()
def now():
	return hozir()
""")


#TAQVIM
modul("taqvim","""
from calendar import*
from datetime import*
from vaqt import*
def yil(yil=int(datetime.now().strftime("%Y"))):
	return prcal(yil)

def oy(yil=int(datetime.now().strftime("%Y")), oy=int(datetime.now().strftime("%m"))):
	return month(yil,oy)

""")

modul("barcha",
"""
from kf import*
from matem import*
from fizika import*
from vaqt import*
from tasodif import*
from taqvim import*
""")

modul("barcha2",
"""
import kf
import matem
import fizika
import vaqt
import tasodif
import taqvim
""")

modul("grafik","""
from chizma import*
from ftkin import*
""")

modul("grafik2","""
import chizma
import ftkin
""")

modul("htmlfayl",
"""import webbrowser as w
import platform as p

def FaylMavjudEmasligiXato(b):
	print("FaylMavjudEmasligiXato:","'"+b+"' nomli fayl mavjud emas. ")

def ochish(yo_l):
	import webbrowser as w
	import os
	a=str(yo_l)
	if os.path.exists(a):
		h=''
		for i in str(a).split("/"):
			h+=("%2F"+i)
		d="content://com.google.android.apps.nbu.files.provider/1/file%3A%2F"
		w.open(d+h)
	else:
		FaylMavjudEmasligiXato(a) 

del w,p
"""
)

modulroy=["__salom__","barcha","barcha2","fizika","ftkin","grafik","grafik2","htmlfayl","kf","matem","taqvim","tasodif","vaqt","chizma"]
piproy=["mega_fizika","shaxmat"]

# BOSHQA
def result(a):
	a=str(a)
	import os
	if os.path.exists(a+".uz"):
		f=open(a+".uz","r")
		n=f.read()
		f.close()
		try:
			print(n,"\n")
			exec(n)
			return ''
		except SyntaxError:
			return "SX:\n"+n
		except NameError:
			return "NX: N '"+a+"' -"
	else:
		FaylMavjudEmasligiXato(a+".uz")
def natija(a):
	return result(str(a))

def file(a):# YOZISH
  	f=str(a)
  	s=0
  	open(f+".uz","w"). close()
  	while True:
  		r=open(f+".uz","a")
  		s+=1
  		d=input(str(s)+"__|")
  		if d.lstrip()=="save" :
  			return result(f); break
  		else:
  			d.lstrip()!="save"
  			r.write(d+"\n");r.close()

def yukla(a):
	a=str(a)
	import os
	if os.path.exists(a+".uzn"):
		g=open(a+".uzn","rt")
		s=g.read()
		g.close()
		return exec(s)
	else:
		ModulMavjudEmasligiXato(a)

# SOʻZLAR
def ip(s):
	return str(s)
def aks(s):
	a=str(s)
	return a[::-1]

def uzun(a):#len
	a=str(a)
	return len(a)

def ralif(a):# isalpha
	return str(a).isalpha()

def rkk(a):# islower()
	return str(a).islower()

def rkt(a):# isupper
	return str(a).isupper()

def rraq(a):# isdigit
	return str(a).isdigit()

def rraqam(a):#isnumeric
	return str(a).isnumeric()

def kichik(a):#lower
	return str(a).lower()

def katta(a):#upper
	return str(a).upper()

def bkat(a):#title
	return str(a).title()

def birkt(a):#capitalize
	return str(a).capitalize()

def olb(a):
	return str(a).lstrip()

def olox(a):
	return str(a).rstrip()

def olbox(a):
	return str(a).strip()

def cteks(satr, uzn):
	return str(satr).ljust(int(uzn))

def oteks(satr, uzn):
	return str(satr).rjust(int(uzn))

def markaz(satr, uzn):
	return str(satr).center(int(uzn))

def top(satr,*b):
	return str(satr).find(str(*b))

def almash(satr, s1, s2):
	return str(satr).replace(str(s1),str(s2))

def ajrat(satr,*blg):
	return str(satr).split(*blg)

def sqo_sh(satr, blg):
	return str(blg).join(satr)

def strqosh(satr,blg):
	a=str(satr).split(blg)
	b=''
	for i in a:
		b+=i
	return b

# QIYMATLAR
def btn(a):# integer
	try:
		return int(a)
	except:
		return QiymatXato(a,"No")

def kasr(a):#float
	try:
		return float(a)
	except:
		return QiymatXato(a,"No")

def lug(a):# dict
	try:
		return dict(a)
	except:
		return QiymatXato(a,"lug")

def topl(a):
	try:
		return tuple(a)
	except TypeError as d3f4:
		d3f4=str(d3f4).split("\'")
		return "X 1 ==\n_X: '"+d3f4[1]+"'Cnt ie to tuple"

# CASE
def case(const, qiymat,aks):# tenglik
	try:
		return qiymat[const]
	except KeyError:
		return aks

def case_in(const,javob, qiymat,aks):# ichida
	s=-1
	try:
		while True:
			s+=1
			if const in qiymat[s]:
				return javob[s]
	except IndexError:
		return aks

def case_full(const, cmd):
			cmd=str(cmd)+""">
None>
None	"""
			a=str(cmd).split(">\n")
			const=a[0]
			for i in range(1,len(a)+2,3):
				if const==eval(a[i-2].strip()):
					exec(a[i-1].strip())
					break

"""	const=cmd[3:]
	c=open("data.py","w")
	c.write(const+"\n")
	c.close()
	del c, const
"""

def casein(const,cmd):
	cmd=str(cmd)+""">
None>
None	"""
	a=str(cmd).split(">\n")
	for i in range(0,len(a),2):
		if const in a[i-2].strip():
			exec(a[i-1].strip())

# STANDART OPERATORLAR
def yozuv(*a, ):
	print(*a)

def kirit(*a):
	g=''
	for i in tuple(a):
		g+=str(i)
		g+=" "
	return input(g.rstrip())

def oltin(a):
	return eval(str(a))
def tkshr(*a):
  return exec(str(a))

def tur(a):
	try:
		return type(a)
	except TypeError:
		KiritishXato(a, 1, "1<arg")

def raq(a):
	a=str(a)
	if len(a)<1 or len(a)>1:
		KiritishXato(a)
	else:
		return ord(a)

def son(a):
	a=str(a)
	if a.isdigit():
		return int(a)

def buqol(a,b):
	try:
		return divmod(a,b)
	except:
		return QiymatXato(str(a)+" or "+str(b))

def sanash(oxr,bosh=0,qdm=1):# range
	return tuple(range(bosh,oxr,qdm))

def kat(a=None):
	return dir(str(a))

def buik(a):
	try:
		a=int(a)
		return bin(a)
	except TypeError or ValueError:
		QiymatXato(a)

def lot_kir(e):
	e=str(e).lower()
	t=''
	g=("%","\ "[0],"|","=","[","]","<",">","{","}","@","#","$","_","&","-","+","(",")","/","~","*","\"","\'",":",";","!","?","^",".",",")
	def case(const,javob):
		global t
		d=-1
		while True:
			d+=1
			try:
				if const==javob[d]:
					return javob[d]
			except:
				pass

	if e.isascii():
		for o in range(0,len(e),1):
			b=e[o]
			if b=='c' and e[o+1]=='h':
				t+='ч'
			elif b=='o' :
				if e[o+1]=="'":
					t+='ӯ'
				else:
					t+='о'
			elif b=='t' :
				t+='т'
			elif b=='b':
				t+='б'
			elif b=='a':
				t+='а'
			elif b=='e':
				t+='е'
			elif b=='k':
				t+='к'
			elif b=='d':
				t+='д'
			elif b=='f':
				t+='ф'
			elif b=='g':
				if e[o+1]=="'":
					t+='ғ'
				else:
					t+='г'
			elif b=='h' :
				if e[o-1]=='s' or e[o-1]=='c':
					t+=''
				else:
					t+='ҳ'
			elif b=='i':
				t+='и'
			elif b=='j':
				t+='ж'
			elif b=='l':
				t+='л'
			elif b=='m':
				t+='м'
			elif b=='n':
				t+='н'
			elif b=='p':
				t+='п'
			elif b=='q':
				t+='қ'
			elif b=='r':
				t+='р'
			elif b=='s':
				if e[o+1]=='h':
					t+='ш'
				else:
					t+='с'
			elif b=='u':
				t+='у'
			elif b=="i":
			    t+="и"
			elif b=='v':
				t+='в'
			elif b=='x':
				t+='х'
			elif b=='y':
				t+='й'
			elif b=='z':
				t+='з'
			elif b==' ':
				t+=' '
			else:
				t+=case(const=b,javob=g)
	elif not(e.isascii()):
		for o in range(0,len(e),1):
			b=e[o]
			if b=='ш':
				t+='sh'
			elif b=='ж':
				t+='j'
			elif b=='а':
				t+='а'
			elif b=='б':
				t+='b'
			elif b=="и":
			    t+="i"
			elif b=='д':
				t+='d'
			elif b=='е':
				t+='e'
			elif b=='f':
				t+='ф'
			elif b=='г':
				t+='g'
			elif b=='h':
				t+='ҳ'
			elif b=='i':
				t+='и'
			elif b=='к':
				t+='k'
			elif b=='л':
				t+='l'
			elif b=='м':
				t+='m'
			elif b=='н':
				t+='n'
			elif b=='о':
				t+='o'
			elif b=='п':
				t+='p'
			elif b=='қ':
				t+='q'
			elif b=='р':
				t+='r'
			elif b=='с':
				t+='s'
			elif b=='т':
				t+='t'
			elif b=='у':
				t+='u'
			elif b=='в':
				t+='v'
			elif b=='х':
				t+='x'
			elif b=='й':
				t+='y'
			elif b=='з':
				t+='z'
			elif b=='ў':
				t+="o'"
			elif b=='ғ':
				t+="g'"
			elif b=='ч':
				t+='ch'
			elif b==' ':
				t+=' '
			else:
				t+=case(const=b,javob=g)
	return t.capitalize()

rost=True
yolgon=False
__nom__="__asosiy__"

# SIKL
def cheksiz(m3f4):
	while True:
		try:
			exec(str(m3f4))
		except SyntaxError:
		    yozuv(SintaksisXato(m3f4))
		except AttributeError as __c__y:
		    c_h_y=str(__c__y).split("\'")
		    AttributXato(c_h_y[1],c_h_y[-2])
		except ModuleNotFoundError as gn7i_t:
			gun_r45hy=str(gn7i_t).split("\'")
			yozuv(ModulMavjudEmasligiXato(gun_r45hy[1]))
		except NameError as k5g3d7:
			kmy56=str(k5g3d7).split("\'")
			print(NomXato(kmy56[1]))
		except IndexError:
			yozuv("IndexError")
		except ZeroDivisionError:
			print("Nolga bo'lish mumkin emas!")
		except:
			yozuv("Xato")

def stop():
	exec("break")

# BOSHQA

def yordam():
        nom="FUPL"
        yozuv("\n\t"+nom+" "+versiya+""" yordam dasturiga xush kelibsiz!
Agar """+nom+"""dan birinchi marotaba foydalanayotgan bo'lsangiz, albatta tekshirib ko'rishingiz kerak.
Yozish bo'yicha yordam olish uchun har qanday modul, kalit so'z yoki mavzu nomini kiriting.
    """+nom+""" dasturlari va """+nom+"""  modullaridan foydalanish.
Ushbu yordam dasturidan chiqish va tarjimonga qaytish uchun, shunchaki, \"chiqish\" ni kiriting.\nMavjud modullar, kalit so'zlar yoki belgilar  ro'yxatini olish uchun
\"modullar\", \"belgilar\" yoki 'FEP' soʻzlaridan birini kiriting.\n""")
        while True:
                pr=input("yordam > ")
                if pr.lstrip()=='':
                	continue
                if "modullar"in pr:
                        yozuv("Modullar roʻyxati:\n\tchizma\n\tmatem\n\tfizika\n\tkf\n\ttasodif\n."); continue
                if "chiqish"in pr:
                        return ''; break
                if "fep"in pr :
                        yozuv("  Qurilmangizda '"+mep+" uz.txt' nomli fayl paydo boʻldi.\nIltomos, qurilmangizni tekshiring!")
                        f=open(mep+" uz.txt","w")
                        f.write("""    Agar siz o'zbek tilini bilsangiz """+mep+""" hujjatlari quyidagicha yoziladi:
Yaratdi: (ism, familiya)
Boshlandi: (yaratish boshlangan vaqt(sana,oy,yil))
Tugatildi: (yaratish tugallangan vaqt(sana,oy,yil))
Versiya:(Qaysi versiya bo'yicha yaratilgani.)
Men quyidagilarni taklif qilmoqchiman:
1)______(1-taklif);
2)_____(2-taklif)
...

    (Agar savollar bo'lsa, quyidagicha:
Quyidagi savollarim bor:
1)____(1-savol)
2)____(2-savol)
...

    DIQQAT!
Qachon "+mep+" soxta deb topiladi?
Qachonki, hujjatda:
1.Bezakdor, badiiy, erkalash so'zlari bo'lsa;
2.Baʼzi parametrlar ko'rsatilmasa;
3.Fayl txt faylga tegishli bo'lmasa;
4."+mep+" muddati o'tgan bo'lsa.

    ESDA SAQLANG!
"""+mep+""" yozishda fayl nomi '"""+mep+'+('+mep+""" raqami).txt' ko'rinishida belgilanishi kerak.
Yaratilayotgan fayl '.txt' koʻrinishida boʻlishi kerak."""+mep+"""larni
fupl.uz@mail.ru elektron pochta manziliga yuborishingiz mumkin!""")
                        f.close(); continue
                if "belgilar"in pr:
                        print("""%    |    ==    <    >    ^    &
+    /    //    *   **    >    <
>>    <<    !=    -    =    <=
>=""")
                else:
                	yozuv ("'"+pr+"' topilmadi. Iltimos, qayta urining.")

def help():
	nom="FUPL"
	yozuv("""

Welcome to """+nom+" "+versiya+"""'s help utility!
Enter the name of any module, keyword, or topic to get help on writing.
"""+nom+" programs and using "+nom+""" modules.  To quit this help
utility and return to the interpreter, just type "quit".

To get a list of available modules, keywords or  symbols type "modules",
"fep"  and  "symbols". Each module also comes with a one-line summary
of what it does; to list the modules whose name or summary contain a
given string such as type .""")
	while True:
		fg=input("help > ")
		if fg.lstrip()=='':
			continue
		if "symbols"in fg:
			yozuv("""+    -    /    *    %    //    **    >>
<<    =    ==    ~    |    ^    &    <
>    <=    >=    """);continue
		"""if "keywords"in fg:
			yozuv("Keywords is not.")"""
		if "modules"in fg:
			yozuv("""List of modules:
    chizma;
    matem;
    fizika;
    kf;
    tasodif.""");continue
		if "quit" in fg:
			return '';break
		if "fep"in fg or "FEP"in fg:
			f=open("FEP en.txt","w")
			f.write("""	If you know English, FEP documents are written as follows:
Created by: (name, surname)
Started: (creation time (date, month, year))
Completed: (creation completion time (date, month, year))
Version: (Based on which version.)
I would like to suggest the following:
1) ______ (Suggestion 1);
2) _____ (Suggestion 2);
...

(If you have questions, as follows :)
I have the following questions:
1) ____ (Question 1);
2) ____ (Question 2);
...

	ATTENTION!
When is FEP found to be fake?
When in the document:
1. If there are words of decoration, art, caress;
2. Some parameters are not specified;
3. The file does not belong to any of the file, such as txt;
4. If the FEP has expired.
	REMEMBER!
When writing FEP, the file name must be set to
'FEP + (FEP number) .txt'.

The created file can be in the form of '.txt'. You can send
FEPs to fupl.uz@mail.ru!""")
			f.close()
			yozuv("\tA file named \"FEP en.txt\" appears on your device. Please check your files!")
		else:
			yozuv("\""+fg+"\""+" not found! Please, retry!")
del help
def mualliflik_huquqi() :
	return "Mualliflik huquqi (c) 2022.\nBarcha huquqlar himoyalangan."
#def copyright() :
#	return "Copyright (c) 2022\nAll Rights Reserved."

def tarix() :
    nom="FUPL"
    return nom+""" dasturlash tilining muallifi- Kamronbek QUCHQOROV.
Dasturni yaratish 2021-yil 1-sentabrda boshlangan."""
#def history():
#    nom="FUPL"
#    return """Maker programming language of """+nom+""" — Kamronbek QUCHQOROV.
#Began in the 2021-year making program."""
#def license() :
#    return "License of MIT"
def litsenziya():
    return 'MIT litsenziyasi'

# ALLOHDAN QO_RQMASANGIZ, ISTAGANINGIZNI QILING!
import platform as o
import os

del nom, frm, os

#stor=''
"""def v5f4():
	b=open (stor+"main.fupl")
	v=b.read()
	z=''
	for i in range(0,len(v),101):
		c=v[i]
		z+=c
	
	#exec(z)
"""
nom="FUPL"
mep="FEP"
versiya="1.0.2"
yan="(03.01.2023 21:26:51)"
print(nom+" ["+versiya+"]  "+yan+"\nKoʻproq maʼlumot 'mualliflik_huquqi()', 'yordam()', 'litsenziya()' yoki 'tarix()' soʻzlarida.")
del mep,yan, nom, o, imp

def kat(a=None):
	return dir(a)

def fhg5():
	__nom__="__asosiy__"
	import platform as p
	if p.system()=="Windows":
		__fayl__="C:/Users/User/Fupl/"
	else:
		__fayl__="/storage/emulated/0/Fupl"
	del p
	def info(a):
		help(a)
	while 1:
		kat=dir()
		m3f4=input(">>> ").strip()
		try:
		    m=eval(m3f4)
		    if m!=None:
		        yozuv(m)
		    if m3f4==None:
		        m
		    del m, m3f4, kat

		except SyntaxError:
		    try:
		        if m3f4!="!!!":
		        	exec(m3f4)
		        if m3f4=="!!!":
		        	c5oh=''
		        	l67=0
		        	while 1:
		        		l67+=1
		        		m3f4c=kirit(str(l67).rjust(2),"| ")
		        		if m3f4c=="!!!":
		        			yozuv("Natija:\n")
		        			exec(c5oh)
		        			del c5oh, m3f4c, l67
		        			break
		        		if m3f4c!="!!!" :
		        			c5oh+=m3f4c+"\n"

		    except SyntaxError as g6h3j9:
		        yozuv("SintaksisXato:",g6h3j9,"\n\t"+m3f4)
		        del g6h3j9
		    except AttributeError as __c__y:
		        c_h_y=str(__c__y).split("\'")
		        AttributXato(c_h_y[1],c_h_y[-2])
		        del c_h_y
		    except ModuleNotFoundError as gn7i_t:
		        gun_r45hy=str(gn7i_t).split("\'")
		        ModulMavjudEmasligiXato(gun_r45hy[1])
		        del gun_r45hy
		    except NameError as k5g3d7:
		        kmy56=str(k5g3d7).split("\'")
		        NomXato(kmy56[1])
		        del k5g3d7, kmy56
		    except IndexError as k5g3d7:
		    	yozuv("IndeksXato:",k5g3d7)
		    	del k5g3d7
		    except ZeroDivisionError:
		    	NolgaBo_lishXato(m3f4)
		    except TypeError as v6cf7:
		    	KiritishXato.pas(v6cf7)
		    	del v6cf7
		    except IsADirectoryError as k5g3d7:
		    	BuKatalogEmasligiXato(k5g3d7)
		    	del k5g3d7
		    except NotADirectoryError as k5g3d7:
		    	BuKatalogEmasligiXato(k5g3d7)
		    	del k5g3d7
		    except PermissionError as k5g3d7:
		    	RuxsatXato(k5g3d7)
		    	del k5g3d7
		    except:
		        yozuv("Xato")
		    del m3f4

		except NameError as k5g7d3:
		     klg65yuj=str(k5g7d3).split("\'")
		     NomXato(klg65yuj[1])
		     del k5g7d3, klg65yuj
		except OSError:
		    yozuv("KFXato:","Ushbu katalog bo'sh emas.")
		except AttributeError as __c__y:
			c_45g3=str(__c__y).split("\'")
			AttributXato(c_45g3[1],c_45g3[-2])
			del c_45g3, __c__y
		except IndexError as k5g3d7:
			yozuv("IndeksXato:", k5g3d7)
			del k5g3d7
		except ZeroDivisionError:
			NolgaBo_lishXato(m3f4)
		except TypeError as gh4d5:
			KiritishXato.pas(gh4d5)
			del gh4d5
		except IsADirectoryError as k5g3d7:
			BuKatalogXato(k5g3d7)
			del k5g3d7
		except NotADirectoryError as k5g3d7:
			BuKatalogEmasligiXato(k5g3d7)
			del k5g3d7
		except PermissionError as k5g3d7:
			RuxsatXato(k5g3d7)
			del k5g3d7
		except:
			yozuv("Xato")
		try:
			del m3f4
		except:
			continue
fhg5()
